// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// template/method.tmpl
// template/struct.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x4f\x8f\xd3\x30\x10\xc5\xcf\xf5\xa7\x18\xf6\x80\x12\x64\xdc\x3b\xd2\x1e\xd8\x15\xac\x90\x56\xa8\x25\x48\x1c\x59\xc7\x99\x40\xd4\xd4\x41\x13\x07\xba\x8a\xf2\xdd\x91\x1d\xb7\x38\x7f\x4a\x7a\x28\xf8\x52\xa9\x9e\x8c\x7f\xf3\xde\x9b\xf5\x1a\xee\x09\xa5\x41\x28\x74\x8d\x64\x6a\x30\xdf\x11\xda\x16\x44\x62\xa8\x51\x46\x7c\x94\x7b\x84\xae\x03\x53\xb9\x9b\x4c\x1a\x99\xca\x1a\x05\xcb\x1b\xad\x20\x22\x78\x35\x2d\x8e\x7d\xcf\x28\x4b\x61\xdb\x20\x3d\x23\xc5\x80\x44\x15\x41\xcb\x00\x08\x4d\x43\x1a\x48\xf4\x55\xf7\x95\x36\x78\x30\x91\xea\x7f\xc5\x9d\x54\xbb\x6f\x54\x35\x3a\x8b\x62\x0e\x59\x1a\xb3\x8e\xb1\xf5\x1a\x1e\xd0\x4c\x9f\xba\x7b\xde\xec\xa0\xc6\x12\x95\x39\x47\x9e\x53\xb5\x9f\x63\x3f\xdb\x2f\xc0\xe6\xb6\xa1\x72\x98\x89\x7b\xc4\xde\xbf\x6f\xb4\xda\x48\x92\xfb\xfa\xf8\xb5\x9b\x39\x9a\x51\x82\xf7\x63\xc7\xe1\xdc\x67\xdf\x5d\x12\x62\x16\x26\xd9\x3e\x4e\x59\xbc\x62\x03\x7d\xff\x85\xc1\x27\x62\x73\x80\x23\xb5\xff\xcf\x02\xcf\x99\x0f\xd0\xb6\xaf\xa1\xc8\x4f\x2d\x3f\xcb\xb4\x44\xf1\xb6\x31\xd5\x03\xea\xcd\x0e\xba\xce\x55\xd9\x83\x44\xf0\xe6\x16\xb2\x54\xb8\x46\x9f\xaa\x5f\xc1\x83\x1c\x4e\x75\xf6\x3c\x9d\xb4\xf9\xe0\xe6\x4c\xb6\x8f\x81\x22\x4f\x7c\x50\x3c\xaa\x9d\x0a\x28\x12\x25\x75\x34\x6e\xa9\xa4\x1e\xa8\x7c\x9c\x06\xcb\x1a\x43\xee\xaf\x3c\x40\x7f\x77\x40\xf5\xbf\xb0\xff\x10\xe9\xcc\x02\xad\x8a\xdc\x91\xbc\xb8\x05\x5d\x94\x5e\x7f\x7b\x7c\x14\x9d\x2d\xb5\xf8\x42\xf2\x47\x84\x44\x1c\x6e\x72\x59\x94\x98\xd9\x30\xf4\x71\x09\x93\xd2\x3b\xe5\x23\x70\x13\xb3\x55\xc7\x56\xbe\x91\x2e\xca\xa5\x2d\x3d\xc6\xf0\xca\xcb\x7a\x61\x04\xaf\xba\xc8\x00\x3f\x25\x01\xcd\xf0\xb3\xe5\xd8\xb2\xa9\xf5\x83\x6d\x9e\xb7\xff\xd2\xcd\x1f\x05\x37\xa8\x1e\x87\x77\x29\x1b\xba\x28\xf9\x5f\x03\xe2\x8d\xbc\x2c\x20\x2f\x89\xfb\x90\xfc\x0e\x00\x00\xff\xff\x8d\xa6\xc3\x96\x72\x06\x00\x00")

func templateMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethodTmpl,
		"template/method.tmpl",
	)
}

func templateMethodTmpl() (*asset, error) {
	bytes, err := templateMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method.tmpl", size: 1650, mode: os.FileMode(436), modTime: time.Unix(1651077821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xc1\x0a\xc2\x30\x10\x44\xcf\xe6\x2b\x96\xde\x4d\xef\x5e\x05\x8f\x5e\xda\x0f\x68\xda\x0c\x2a\x24\xb1\x24\xe9\x41\x96\xfd\x77\xd9\x62\x45\xb0\xb7\xdd\x99\x79\xaf\x6d\x89\x99\x6c\x57\xf3\x32\x55\x7b\x75\x11\x24\x42\x19\x73\x46\x41\xaa\xe5\xb7\xed\xdd\x18\x60\xbb\xe9\x8e\xe8\x48\xc4\xfe\x55\x1f\xdc\xd4\xd7\x8c\x3d\x6d\x59\x5f\x62\xc3\x7c\xa4\xec\xd2\x0d\xdf\xc9\xe5\x81\xe0\x8b\xc2\x07\x05\x37\x42\xef\x5e\x6d\x22\x34\xf8\xf1\xd4\x68\x70\x7e\x86\x25\xa6\x6d\xd3\x0c\xab\x0e\xc9\x2b\x2d\xe6\x1d\x00\x00\xff\xff\xf5\xb8\xc4\x98\xd2\x00\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 210, mode: os.FileMode(436), modTime: time.Unix(1651077821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/method.tmpl": templateMethodTmpl,
	"template/struct.tmpl": templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"method.tmpl": &bintree{templateMethodTmpl, map[string]*bintree{}},
		"struct.tmpl": &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
